package com.newchinalife;

import com.poly.nci.customer.utils.XstreamTool;
import com.newchinalife.common.header.in.SysMsgHeader;
import com.newchinalife.service.bd.InputData;
import com.newchinalife.service.bd.SrvReqBizBody;
import com.newchinalife.service.bd.SrvReqBody;
import com.newchinalife.service.bd.SrvResBody;
import com.newchinalife.service.hd.SRVReqHead;

import javax.xml.namespace.QName;
import javax.xml.ws.Holder;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Logger;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.3-hudson-390-
 * Generated source version: 2.0
 * <p>
 * An example of how this class may be used:
 * 
 * <pre>
 * PolicyHolderQuerySrvBindingQSService service = new PolicyHolderQuerySrvBindingQSService();
 * PolicyHolderQuerySrvPortType portType = service.getPolicyHolderQuerySrvBindingQSPort();
 * portType.policyHolderQuery(...);
 * </pre>
 * 
 * </p>
 * 
 */
@WebServiceClient(name = "PolicyHolderQuerySrvBindingQSService", targetNamespace = "http://www.newchinalife.com", wsdlLocation = "http://10.1.73.1:8111/services/P00001000305?wsdl")
public class PolicyHolderQuerySrvBindingQSService extends Service {

	private final static URL POLICYHOLDERQUERYSRVBINDINGQSSERVICE_WSDL_LOCATION;
	private final static Logger logger = Logger
			.getLogger(PolicyHolderQuerySrvBindingQSService.class
					.getName());

	static {
		URL url = null;
		try {
			URL baseUrl;
			baseUrl = PolicyHolderQuerySrvBindingQSService.class
					.getResource(".");
			url = new URL(baseUrl,
					"http://10.1.73.1:8111/services/P00001000305?wsdl");
		} catch (MalformedURLException e) {
			logger.warning("Failed to create URL for the wsdl Location: 'http://10.1.73.1:8111/services/P00001000305?wsdl', retrying as a local file");
			logger.warning(e.getMessage());
		}
		POLICYHOLDERQUERYSRVBINDINGQSSERVICE_WSDL_LOCATION = url;
	}

	public PolicyHolderQuerySrvBindingQSService(URL wsdlLocation,
			QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public PolicyHolderQuerySrvBindingQSService() {
		super(POLICYHOLDERQUERYSRVBINDINGQSSERVICE_WSDL_LOCATION, new QName(
				"http://www.newchinalife.com",
				"PolicyHolderQuerySrvBindingQSService"));
	}

	/**
	 * 
	 * @return returns PolicyHolderQuerySrvPortType
	 */
	@WebEndpoint(name = "PolicyHolderQuerySrvBindingQSPort")
	public PolicyHolderQuerySrvPortType getPolicyHolderQuerySrvBindingQSPort() {
		return super.getPort(new QName("http://www.newchinalife.com",
				"PolicyHolderQuerySrvBindingQSPort"),
				PolicyHolderQuerySrvPortType.class);
	}
	public String queryPersonal(String ContNo){

		StringBuffer rtn = new StringBuffer();
		rtn.append("<TransType>\n");
		PolicyHolderQuerySrvPortType portType = this.getPolicyHolderQuerySrvBindingQSPort();
		SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm:ss:SSS");
		String id = "123321222222233444";
//		log.info("投保人信息查询接口流水号："+id);
//		log.info("保单号："+ContNo);
		//请求的技术报文头
		SysMsgHeader parametersReqHeader = new SysMsgHeader();
		parametersReqHeader.setMsgId(id);
		parametersReqHeader.setMsgDate(sdfDate.format(new Date()));//必填项
		parametersReqHeader.setMsgTime(sdfTime.format(new Date()));//必填项
		parametersReqHeader.setServCd("P00001000305");//必填项
		parametersReqHeader.setSysCd("050");//必填项
		parametersReqHeader.setBizId("01-14_I01");//必填项
		parametersReqHeader.setBizType("");
		parametersReqHeader.setOrgCd("86");//必填项
		parametersReqHeader.setResCd("");
		parametersReqHeader.setResText("");
		parametersReqHeader.setBizResCd("");
		parametersReqHeader.setBizResText("");
		parametersReqHeader.setVer("110.100.000");//必填项



		SrvReqBody parametersReqBody = new SrvReqBody();
		//请求的业务报文头
		SRVReqHead srvReqHead = new SRVReqHead();
		srvReqHead.setOperator("ydbq");
		srvReqHead.setTotalRowNum("");
		srvReqHead.setRowNumStart("1");
		srvReqHead.setPageFlag("0");
		srvReqHead.setPageRowNum("1000");
		srvReqHead.setOrderFlag("0");
		srvReqHead.setOrderField("");
		parametersReqBody.setBizHeader(srvReqHead);
		//请求的业务报文体
		SrvReqBizBody srvReqBizBody = new SrvReqBizBody();
		InputData inputData = new InputData();
		inputData.setContNo(ContNo);
		srvReqBizBody.setInputData(inputData);
		parametersReqBody.setBizBody(srvReqBizBody);

		//初始化响应的对象
		Holder<SysMsgHeader> parametersResHeader = new Holder<SysMsgHeader>();
		Holder<SrvResBody> parametersResBody = new Holder<SrvResBody>();

		//wsdl生成客户端时自动生成的方法，此方法是进入esb平台的入口
		portType.policyHolderQuery(parametersReqHeader, parametersReqBody, parametersResHeader, parametersResBody);
		//响应的技术报文头
//		log.info("-------------------响应的技术报文头----------------------");
//		log.info("msgId:"+parametersResHeader.value.getMsgId());
//		log.info("msgDate:"+parametersResHeader.value.getMsgDate());
//		log.info("msgTime:"+parametersResHeader.value.getMsgTime());
//		log.info("servCd:"+parametersResHeader.value.getServCd());
//		log.info("sysCd:"+parametersResHeader.value.getSysCd());
//		log.info("bizId:"+parametersResHeader.value.getBizId());
//		log.info("bizType:"+parametersResHeader.value.getBizType());
		String resCd = parametersResHeader.value.getResCd();
		String resText = parametersResHeader.value.getResText();
//		log.info("resCd:"+parametersResHeader.value.getResCd());
//		log.info("resText:"+parametersResHeader.value.getResText());
		String bizResCd = parametersResHeader.value.getBizResCd();
		String bizResText = parametersResHeader.value.getBizResText();
//		log.info("bizResCd:"+parametersResHeader.value.getBizResCd());
//		log.info("bizResText:"+parametersResHeader.value.getBizResText());
//		log.info("ver:"+parametersResHeader.value.getVer());

		//响应的业务报文头
//		log.info("------------------响应的业务报文头-----------------------");
//		log.info("Operator:"+parametersResBody.value.getBizHeader().getOperator());
//		log.info("RowNumStart:"+parametersResBody.value.getBizHeader().getRowNumStart());
//		log.info("CltSysCode:"+parametersResBody.value.getBizHeader().getCltSysCode());
//		log.info("OperatorCom:"+parametersResBody.value.getBizHeader().getOperatorCom());

		//响应的业务报文体
//		log.info("-------------------响应的业务报文体----------------------");
//		log.info("PrtNo:"+parametersResBody.value.getBizBody().getOutputData().getResult().get(0).getPrtNo());//原投保单号
//		log.info("CValidate:"+parametersResBody.value.getBizBody().getOutputData().getResult().get(0).getCValidate());//原保单生效日期
//		log.info("AgentCode:"+parametersResBody.value.getBizBody().getOutputData().getResult().get(0).getAgentCode());//业务员工号
//		log.info("AgentName:"+parametersResBody.value.getBizBody().getOutputData().getResult().get(0).getAgentName());//业务员姓名
//		log.info("ManageCom:"+parametersResBody.value.getBizBody().getOutputData().getResult().get(0).getManageCom());//业务员所在管理机构码
//		log.info("output:"+XstreamTool.toXml(parametersResBody.value.getBizBody().getOutputData()));
		StringBuffer rtnXml = new StringBuffer();
		rtnXml.append("<?xml version=\"1.0\" encoding=\"GBK\"?>\n");
		rtnXml.append("<TransType>\n");
		rtnXml.append("<BaseInfo>\n");
		rtnXml.append("<resCd>"+resCd+"</resCd>\n");
		rtnXml.append("<resText>"+resText+"</resText>\n");
//		rtnXml.append("<bizResCd>"+bizResCd+"</bizResCd>\n");
//		rtnXml.append("<bizResText>"+bizResText+"</bizResText>\n");
		rtnXml.append("<ResultCode>"+bizResCd+"</ResultCode>\n");
		rtnXml.append("<ResultMsg>"+bizResText+"</ResultMsg>\n");
		rtnXml.append("</BaseInfo>\n");
		if(bizResCd.equals("0")){
			String searchXml = XstreamTool.toXml(parametersResBody.value.getBizBody().getOutputData()).replace("com.newchinalife.service.bd.P00001000305.", "").
					replace("<Result>", "<TInsure>").replace("</Result>", "</TInsure>").
					replace("<result>", "").replace("</result>", "");
			rtnXml.append(searchXml+"\n");
		}
		rtnXml.append("</TransType>");
//		log.info(rtnXml.toString());
		return rtnXml.toString();

	}

//	public static void main(String[] args) {
//		PolicyHolderQuerySrvBindingQSService p = new PolicyHolderQuerySrvBindingQSService();
//		System.out.println(p.queryPersonal("886816378708"));
//	}
}
